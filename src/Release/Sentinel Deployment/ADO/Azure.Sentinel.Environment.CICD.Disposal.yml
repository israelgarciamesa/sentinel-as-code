#
# Azure DevOps Yaml Pipeline: Release and Manage Configuration for Sentinel in a Pre-Defined Environment 
#

trigger: none

pool:
  vmImage: 'windows-latest'

parameters:
  - name: ServiceConnectionName
    displayName: Azure Environment Connection
    type: string  
  - name: ForceHardDelete
    displayName: Remove with Hard Delete (cannot be recovered)
    type: boolean
    default: false
  - name: UsePreRelease
    displayName: Use Powershell Pre-Release Artifacts
    type: boolean
    default: false

variables:
  - name: ResourceGroupName
  - name: ResourceName
  
resources:
  repositories:
  - repository: AzureSentinel
    type: git
    name: SOC/Artifacts
    ref: $(Build.SourceBranchName)


steps:
- checkout: self
- checkout: AzureSentinel

- task: NuGetToolInstaller@1
  displayName: Setup Nuget Tools
  name: NugetToolSetup
  inputs:
    versionSpec: 
    checkLatest: true

- task: NuGetAuthenticate@0
  condition: succeeded()
  displayName: Authenticating with Sentinel Nuget
  name: NugetAuthentication
  inputs:
    nuGetServiceConnections: 'Nuget Framework Connection'

- task: PowerShell@2
  condition: succeeded()
  displayName: Resolving Feed Url
  name: FeedUriResolver
  inputs:
    targetType: 'inline'
    script: |
      $FeedManifest = $Env:VSS_NUGET_EXTERNAL_FEED_ENDPOINTS | ConvertFrom-Json
      Write-Host "##vso[task.setvariable variable=FEED_URL;issecret=false;]$($FeedManifest.endpointCredentials.endpoint)"

- task: PowerShell@2
  displayName: DevOps Artifact Feed
  condition: succeeded()
  name: ConnectArtifactFeed
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      nuget.exe sources add -Name NugetFramework -Source $(FEED_URL) -Username "PAT" -Password $(VSS_NUGET_ACCESSTOKEN) 
      $(Build.SourcesDirectory)/Framework/Src/Build/Azure.Sentinel.Powershell.Nuget.Connect.ps1 -NuGetApiKey "$(VSS_NUGET_ACCESSTOKEN)" -Location $(FEED_URL) -Name NugetFramework
      try {
        $Credentials = $(Build.SourcesDirectory)/Framework/Src/Build/Azure.Sentinel.Powershell.Nuget.Credentials.ps1 -NuGetApiKey "$(VSS_NUGET_ACCESSTOKEN)"
        $AllowPrerelease = [bool]::Parse("${{ parameters.UsePreRelease }}")
        Install-Module -Name "Azure.Deployment.Environment" -Repository "NugetFramework" -Scope CurrentUser -AllowPrerelease:$AllowPrerelease -Credential $Credentials
      }
      finally {
        (Get-Module -Name Azure.Deployment.Environment -ListAvailable) | ft Name, Version
        $(Build.SourcesDirectory)/Framework/Src/Build/Azure.Sentinel.Powershell.Nuget.Disconnect.ps1 -Name NugetFramework
      }

- task: AzurePowerShell@5
  name: ResourceSettings
  condition: succeeded()
  displayName: Prepare Resource Naming
  inputs:
    azureSubscription: '${{ parameters.ServiceConnectionName }}'
    ScriptType: 'InlineScript'
    Inline: |
      Import-Module -Name $(System.DefaultWorkingDirectory)/Framework/Src/Deploy/Common/Azure.DevOps.Extensions.psm1
      $Environment = $(System.DefaultWorkingDirectory)/Framework/Src/Deploy/Common/Azure.Environments.ps1 -Path $(System.DefaultWorkingDirectory)/Artifacts/Src/Deploy/Environments
      $Environment
      Set-AzureDevOpsVariable ResourceGroupName = $Environment.ResourceGroupName
      Set-AzureDevOpsVariable ResourceName = $Environment.LogAnalyticsWorkspaceName
    azurePowerShellVersion: 'LatestVersion'
    pwsh: true
    workingDirectory: '$(System.DefaultWorkingDirectory)'

- ${{ if eq(parameters.ForceHardDelete, true) }}:
  - task: AzurePowerShell@5
    displayName: Removing Workspace (Hard Delete)
    inputs:
      azureSubscription: '${{ parameters.ServiceConnectionName }}'
      ScriptType: 'FilePath'
      ScriptPath: '$(System.DefaultWorkingDirectory)/Framework/Src/Deploy/Sentinel/Azure.Sentinel.Remove.ps1'
      ScriptArguments: '-ResourceGroupName $(ResourceGroupName) -WorkspaceName $(ResourceName)'
      azurePowerShellVersion: 'LatestVersion'
      pwsh: true
      workingDirectory: '$(System.DefaultWorkingDirectory)'

- task: AzureResourceManagerTemplateDeployment@3
  displayName: Completing Remove Environment
  inputs:
    azureResourceManagerConnection: '${{ parameters.ServiceConnectionName }}'
    deploymentScope: 'Resource Group'
    action: 'DeleteRG'
    resourceGroupName: '$(ResourceGroupName)'